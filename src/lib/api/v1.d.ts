/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/1/appservice/get/{bot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the bot */
        get: operations["getBotInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/appservice/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Bots for the requesting user */
        get: operations["listBots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/appservice/provision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Provision a bot */
        post: operations["provisionBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/report/{room_id}/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a report to draupnir */
        post: operations["messageReports"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/spam_check/user_may_invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check if a user is allowed to invite */
        post: operations["usersMayInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/spam_check/user_may_join_room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check if a user is allowed to join a room */
        post: operations["userMayJoinRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/1/spam_check/check_event_for_spam": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check if an event is spam */
        post: operations["CheckEventForSpam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @example Missing access token
         * @enum {string}
         */
        BotUnauthenticatedError: "Missing access token";
    };
    responses: never;
    parameters: {
        /**
         * @description The user ID of the openID user. This must match the matrix id of the user that created the openid token.
         * @example @example:example.com
         */
        DraupnirUserID: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getBotInfo: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The user ID of the openID user. This must match the matrix id of the user that created the openid token.
                 * @example @example:example.com
                 */
                "X-Draupnir-UserID": components["parameters"]["DraupnirUserID"];
            };
            path: {
                /**
                 * @description The ID of the bot to get information about
                 * @example @example:example.com
                 */
                bot_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example !example:example.com */
                        managementRoom: string;
                        /** @example @example:example.com */
                        ownerId: string;
                        /** @example Example Bot */
                        displayName: string;
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_MISSING_PARAM" | "M_INVALID_PARAM";
                        /**
                         * @example Invalid user ID
                         * @enum {string}
                         */
                        error: "Invalid user ID" | "Missing X-Draupnir-UserID header" | "Missing bot ID" | "Invalid bot ID";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_MISSING_TOKEN";
                        /**
                         * @example Missing access token
                         * @enum {string}
                         */
                        error: "Missing access token" | "Missing or invalid openid token" | "User ID does not match the one in the header";
                    };
                };
            };
            /** @description The requested bot was not found on the server. The client should check the bot ID and try again. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_NOT_FOUND";
                        /**
                         * @example Bot not found
                         * @enum {string}
                         */
                        error: "Bot not found";
                    };
                };
            };
            /** @description The server is unable to handle the request. Possibly due to a misconfiguration. Are you sure this is an appservice draupnir? */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_NOT_CONFIGURED";
                        /**
                         * @example Appservice manager not configured
                         * @enum {string}
                         */
                        error: "Appservice manager not configured";
                    };
                };
            };
        };
    };
    listBots: {
        parameters: {
            query?: {
                /** @description Whether to only return bots owned by the user */
                onlyOwner?: boolean;
            };
            header: {
                /**
                 * @description The user ID of the openID user. This must match the matrix id of the user that created the openid token.
                 * @example @example:example.com
                 */
                "X-Draupnir-UserID": components["parameters"]["DraupnirUserID"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        bots: {
                            /** @example @example:example.com */
                            id: string;
                            /** @example !example:example.com */
                            managementRoom: string;
                            /** @example @example:example.com */
                            ownerID: string;
                            /** @example Example Bot */
                            displayName: string;
                            protectedRooms: {
                                /** @example !example:example.com */
                                room: string;
                                /** @example Example Room */
                                displayName?: string;
                            }[];
                            subscribedLists: string[];
                        }[];
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_INVALID_PARAM";
                        /**
                         * @example Invalid user ID
                         * @enum {string}
                         */
                        error: "Invalid user ID" | "Missing X-Draupnir-UserID header";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_MISSING_TOKEN";
                        /**
                         * @example Missing access token
                         * @enum {string}
                         */
                        error: "Missing access token" | "Missing or invalid openid token" | "User ID does not match the one in the header";
                    };
                };
            };
            /** @description The server is unable to handle the request. Possibly due to a misconfiguration. Are you sure this is an appservice draupnir? */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_NOT_CONFIGURED";
                        /**
                         * @example Appservice manager not configured
                         * @enum {string}
                         */
                        error: "Appservice manager not configured";
                    };
                };
            };
        };
    };
    provisionBot: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The user ID of the openID user. This must match the matrix id of the user that created the openid token.
                 * @example @example:example.com
                 */
                "X-Draupnir-UserID": components["parameters"]["DraupnirUserID"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    protectedRooms?: string[];
                };
            };
        };
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example !example:example.com */
                        managementRoom: string;
                        /** @example @example:example.com */
                        botID?: string;
                        /** @example @example:example.com */
                        ownerID: string;
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_INVALID_PARAM";
                        /**
                         * @example Invalid user ID
                         * @enum {string}
                         */
                        error: "Invalid user ID" | "Missing X-Draupnir-UserID header";
                        /** @description Invalid room IDs */
                        invalidIDs?: string[];
                        /** @description Rooms which draupnir failed to join or protect */
                        failedIDs?: string[];
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_MISSING_TOKEN";
                        /**
                         * @example Missing access token
                         * @enum {string}
                         */
                        error: "Missing access token" | "Missing or invalid openid token" | "User ID does not match the one in the header";
                    };
                };
            };
            /** @description The server is unable to handle the request. Possibly due to a misconfiguration. Are you sure this is an appservice draupnir? */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        errcode: "M_NOT_CONFIGURED" | "M_INTERNAL_SERVER_ERROR" | "M_UNKNOWN";
                        /**
                         * @example Appservice manager not configured
                         * @enum {string}
                         */
                        error: "Appservice manager not configured" | "Failed to provision bot" | "Failed to protect rooms because draupnir is not running. Unable to continue.";
                    };
                };
            };
        };
    };
    messageReports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The room ID in which the reported event occurred */
                room_id: string;
                /** @description The event ID of the event to report */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example M_BAD_REQUEST */
                        errcode?: string;
                        /**
                         * @example Invalid room ID
                         * @enum {string}
                         */
                        error?: "Invalid room ID" | "Invalid event ID";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["BotUnauthenticatedError"];
                };
            };
            /** @description The server is currently unable to handle the request due to a temporary overload or maintenance of the server. */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    usersMayInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The user ID of the inviter */
                    inviter: string;
                    /** @description The user ID of the invitee */
                    invitee: string;
                    /** @description The room ID of the room */
                    room_id: string;
                };
            };
        };
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example M_INVALID_PARAM */
                        errcode?: string;
                        /**
                         * @example Invalid room ID
                         * @enum {string}
                         */
                        error?: "Error handling inviter, invitee, and room_id";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["BotUnauthenticatedError"];
                };
            };
        };
    };
    userMayJoinRoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The user ID of the user joining the room */
                    user: string;
                    /** @description The room ID of the room to join */
                    room: string;
                    /** @description Whether the user is invited to the room */
                    is_invited: boolean;
                };
            };
        };
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example M_INVALID_PARAM */
                        errcode?: string;
                        /**
                         * @example Invalid room ID
                         * @enum {string}
                         */
                        error?: "Error handling user, room, and is_invited";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["BotUnauthenticatedError"];
                };
            };
        };
    };
    CheckEventForSpam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The event to check for spam */
                    event: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description The request was successful, and the server has returned the requested resource in the response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description The server could not understand the request due to invalid syntax. The client should modify the request and try again. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example M_INVALID_PARAM */
                        errcode?: string;
                        /**
                         * @example Invalid room ID
                         * @enum {string}
                         */
                        error?: "Error handling event";
                    };
                };
            };
            /** @description Authentication is required to access the requested resource. The client must include the appropriate credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["BotUnauthenticatedError"];
                };
            };
        };
    };
}
